name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: chlrltjd5263/petmourning
  VERSION: ${{ github.sha }}
  NAME: petmourning
  SERVER_NAME: djangoServer

  
permissions:
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup docker buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ env.VERSION }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Create .env file
      run: |
        echo "$SECRETS_CONTEXT" >> .env
      env:
        SECRETS_CONTEXT: ${{secrets.SECRETS_CONTEXT}}
        
    - name: Build Docker image
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASS }}
        docker-compose -f docker-compose.yml build
        docker push ${{ env.DOCKER_IMAGE }}:latest

  
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-petmourning ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Docker run
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASS }}
          sudo docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          sudo docker pull ${{ env.DOCKER_IMAGE }}:latest
          sudo docker create -p 80:80 --name ${{ env.NAME }} ${{ env.DOCKER_IMAGE }}:latest
          sudo docker cp .env ${{ env.SERVER_NAME }}:/code/
          sudo docker cp petmourningFCM.json ${{ env.SERVER_NAME }}:/code/
          sudo docker start ${{ env.NAME }}
    
